\NeedsTeXFormat{LaTeX2e}

\RequirePackage{amstext}
\RequirePackage{listings}
\PassOptionsToPackage{dvipsnames}{xcolor}
\RequirePackage{tcolorbox}

\tcbuselibrary{listings}
\tcbuselibrary{listingsutf8}
\tcbuselibrary{skins}

\newcommand\codesize{\scriptsize}
\def\codedisplayspace{0pt}

\ProcessOptions

% These two macros are defined for quick and trouble free placement of short
% code and keywords of any programming language within the document.
\newcommand\kk[1]{\textcolor{eclipse-purple}{\text{\textup{\textbf{\texttt{#1}}}}}}
\newcommand\cc[1]{{\text{\textup{\textbf{\texttt{#1}}}}}}

\providecommand{\listingsfont}{\ttfamily}
\providecommand{\commentsfont}{\rmfamily}

\def\nameBASH{\Bash}
\def\nameADA{\Ada}
\def\nameAWKPROG{\AWK}
\def\nameCEEPL{\CPL}
\def\nameCPLUSPLUS{\CC}
\def\nameCSHARP{\CSharp}
\def\nameEMEL{\ML}
\def\nameFORTRAN{\Fortran}
\def\nameGO{\Go}
\def\nameHASKELL{\Haskell}
\def\nameJAVA{\Java}
\def\nameLISP{\Lisp}
\def\nameOCCAM{\Occam}
\def\namePASCAL{\Pascal}
\def\namePEEAGEPEE{\PHP}
\def\namePEEELONE{PL/I}
\def\namePERL{\Perl}
\def\namePROLOG{\Prolog}
\def\namePYTHON{\Python}
\def\nameLOLA{Lola}

\tcbuselibrary{fitting}

\tcbset{codebox/.style={
  after=\relax,
  before=\relax,
  left=2ex,
  right=0pt,
  left skip=0pt,
  right skip=0pt,
  top=0pt,
  bottom=0pt,
  boxsep=0pt,
  toprule=0pt,
  bottomrule=0pt,
  leftrule=0pt,
  rightrule=0pt,
  clip title=false,
  colbacklower=blue!90,
  colback=olive!10!white,
  colbacktitle=yellow!85!orange!77!white,
  colframe=white,
  sharp corners=all,
  collower=Blue,
  coltitle=blue!50!black,
  % drop shadow=black!60,
  enhanced,
  fontlower=\footnotesize\ttfamily\slshape\bfseries,
  hbox,
%  interior style={left color=olive!9!white,right color=olive!16!white},
  listing only,
  listing remove caption=true,
  listing style=#1,
  notitle,
}}

\tcbset{output/.style={
    minipage,
    comment=#1,
    listing and comment,
}}

\newtcblisting{Sample}[1][]{%
  codebox=LOLA,
  colback=yellow!10,
  minipage,
  width=\linewidth,
  #1
}

\newtcblisting{Sample*}[1][]{%
  codebox=LOLANUMS,
  colback=yellow!10,
  minipage,
  width=\columnwidth,
  right=2.4ex,
  #1
}

\newtcblisting{lola}[1][]{%
  codebox={LOLA},
  colback=yellow!8,
  colframe=yellow!50!black,
  minipage,
  width=0.9\linewidth,
  center upper,
  left=2ex,
  right=0pt,
  #1
}


\newtcblisting{code}[2][]{%
  left=0ex,
  codebox=#2,
  left=0ex,
  #1
}

\newcommand\pInput[2][]{
  \tcbinputlisting{codebox=P4,colframe=yellow!50!black,listing options={style=P4},left=0ex,listing file=#2,#1}}

\newtcblisting{Code}[2][]{%
  codebox=#2,
  listing options={style=numbered,style=#2},
  minipage,
  width=\linewidth,
  #1
}




\newtcblisting{lcode}[2][]{%
  codebox=#2,
  #1
}


\newtcblisting{lCode}[3][]{%
  codebox=#2,
  title={#3},
  before=\par\smallskip,
  #1
}

\newtcblisting{session}[1][]{%
  codebox=printout,
  size=small,
  minipage,
  outer arc=12pt,
  sharp corners=downhill,
  arc=12pt,
  colback=Blue,
  #1
}

% Begin with generating a general purpose ``code style''. Use a mono-spaced font
% for everything; set tabs, escape, etc.

\lstdefinestyle{basic}{%
  fontadjust,
  showstringspaces=true,
  extendedchars=true,
  escapechar=Â¢,
  columns={fullflexible},
  keepspaces=true,
  tabsize=2,
  belowskip=0pt,
  aboveskip=3pt,
  xleftmargin=200pt,
  xrightmargin=0pt,
  breaklines=true,
}

\lstdefinestyle{printout}{%
  style=basic,
  frame=none,
  basicstyle=\color{White}\listingsfont\codesize\slshape,
  keywordstyle=\color{White}\listingsfont\codesize\slshape,
  commentstyle=\color{White}\listingsfont\codesize\slshape,
  stringstyle=\color{White}\listingsfont\codesize\slshape,
}

\lstdefinestyle{code}{%
  style=basic,
  basicstyle=\color{Sepia}\listingsfont\codesize\upshape,
  keywordstyle=\color{RoyalBlue}\listingsfont\codesize\textup\bfseries,
  commentstyle=\color{ForestGreen}\commentsfont\codesize\slshape,
  stringstyle=\color{OliveGreen}\listingsfont\codesize\itshape,
  language=C,
  emphstyle={\color{Magenta}\listingsfont\codesize\slshape},
  language=Java,
}


% Begin with generating a general purpose code style. Use a mono-spaced font
% for everything but comments.  Keywords are bold face, strings are in italics,
% while comments are in italics roman font. The escape character is back-quote.

\lstdefinestyle{display}{%
  style=code,
  basicstyle=\color{Sepia}\listingsfont\codesize\upshape,
  keywordstyle=\color{RoyalBlue}\listingsfont\codesize\textup\bfseries,
  commentstyle=\color{ForestGreen}\commentsfont\codesize\slshape,
  stringstyle=\color{OliveGreen}\listingsfont\codesize\itshape,
  xleftmargin=3ex,
}

\lstdefinestyle{inline}{%
  style=code,
}

% General style for numbered displayed code. Same as "display" style,
% but with minimal spacing for the numbering.
\lstdefinestyle{numbered}{%
  style=display,
  numbers=left,
  stepnumber=1,
  numbersep=2pt,
  numberblanklines=false,
  numberstyle=\tiny\bf\color{black},
}


\lstset{defaultdialect=[GNU]C++}

\lstdefinelanguage{GoOH}{% Keywords as defined in the BNF
	morekeywords=[1]{break,default,func,interface,%
		case,defer,go,map,struct,chan,else,goto,package,%
		switch,const,fallthrough,if,range,type,continue,%
	for,import,return,var,select},
	% Special identifiers, builtin functions
	morekeywords=[2]{make,new,nil,len,cap,copy,cmplx,%
		real,imag,panic,recover,print,println,iota,close,%
		closed,\ignore$_\ignore$}, % Make gvim happy.
	% Basic types
	morekeywords=[3]{%
		string,int,uint,uintptr,double,float,complex,byte,%
		int8,int16,int32,int64,int128,%
		uint8,uint16,uint32,uint64,uint128,%
	float32,float64,complex64,complex128},
	% Strings : "toto", 'toto', `toto`
	morestring=[b]{"},
	morestring=[b]{'},
	morestring=[b]{`},
	% Comments : /* comment */ and // comment
	comment=[l]{//},
	morecomment=[s]{/*}{*/},
	% Optionalss
	sensitive=true
}

\lstdefinestyle{P4}{language=P4}

\lstdefinelanguage[]{P4}[]{C++}{%
  morekeywords={% vim: +,/}/-1!column -t | awk  '{print "    "  $0}'|sort  -u
    action,
    actions,
    add,
    add_header,
    algorithm,
    and,
    apply,
    calculated_field,
    clone_egress_pkt_to_egress
    clone_egress_pkt_to_ingress,
    clone_ingress_pkt_to_egress,
    clone_ingress_pkt_to_ingress,
    control,
    copy_header,
    count,
    crc16,
    crc32,
    csum16,
    current,
    default,
    drop,
    egress_instance,
    egress_port,
    egress_spec,
    else,
    extract,
    field_list,
    field_list_calculation,
    fields,
    generate_digest,
    header,
    header_type,
    hit,
    if,
    ingress_length,
    ingress_port,
    input,
    instance_type,
    last,
    latest,
    metadata,
    meter,
    modify_field,
    no_op,
    output_width,
    p4_pe_checksum,
    p4_pe_header_too_long,
    p4_pe_header_too_short,
    p4_pe_out_of_packet,
    p4_pe_unhandled_select,
    parse_error,
    parser,
    parser_error_location,
    parser_status,
    payload,
    pop,
    programmable_crc,
    push,
    reads,
    recirculate,
    remove_header,
    resubmit,
    return,
    select,
    set_field_to_hash_index,
    size,
    switch
    switchp4_pe_index_out_of_bounds,
    truncate,
    update
    xor16,
  },
  deletekeywords={
    for,
    int,
  },
  sensitive=true,
  style=display,
  morestring=[b]",
}

%	#1 Changes to the language definition, as in the listing package
%	#2 Language name, as it is known to the listing package.
% #3 Name of the environment of the newly defined language.
\newcommand\newLanguage[3][]{%
	\lstdefinestyle{#3}{language={#2},style=display,#1}%
  \lstnewenvironment{#3}[1][]{\lstset{style=#3,##1}}{}%
}

\lstdefinelanguage{Lola}{
    deletekeywords={%
        const, final, %
        boolean, byte, char, float, long, short, int, double, void, %
        extends, implements, %
        new, %
        static, public, private, protected, final, abstract, class, %
        true, false, %
        while, return, for, continue, case, if %
    }, %
    sensitive=true, %
    extendedchars=true,%
    morekeywords={%
%vim: +,/^%%%*$/-!column -t|sort -u|gawk '{print "\t" $$0}'
	@                  ,
	@affirm            ,
	@Affirm            ,
	@anchor            ,
	@Anchor            ,
	@and               ,
	@Any               ,
	@append            ,
	@Append            ,
	@assert            ,
	@Assert            ,
	@BeginningOfLine   ,
	@Case              ,
	@closer            ,
	@default           ,
	@delete            ,
	@Delete            ,
	@description       ,
	@Description       ,
	@Either            ,
	@else              ,
	@elseIf            ,
	@Empty             ,
	@EndOfFile         ,
	@EndOfLine         ,
	@example           ,
	@Example           ,
	@exceptFor         ,
	@filter            ,
	@Filter            ,
	@find              ,
	@Find              ,
	@followedBy        ,
	@forEach           ,
	@ForEach           ,
	@id                ,
	@if                ,
	@If                ,
	@ifNone            ,
	@Import            ,
	@include           ,
	@Include           ,
	@log               ,
	@Log               ,
	@Match             ,
	@neither           ,
	@Neither           ,
	@NewLine           ,
	@NonEmptySubsetOf  ,
	@NoneOrMore        ,
	@nor               ,
	@not               ,
	@Not               ,
	@note              ,
	@Note              ,
	@Nothing           ,
	@of                ,
	@OneOrMore         ,
	@opener            ,
	@Optional          ,
	@or                ,
	@otherwise         ,
	@PermutationOf     ,
	@prepend           ,
	@Prepend           ,
	@ProperSubsetOf    ,
	@replace           ,
	@Replace           ,
	@resultsIn         ,
	@run               ,
	@Run               ,
	@SameLine          ,
	@see               ,
	@See               ,
	@separator         ,
	@sequence          ,
	@Sequence          ,
	@splice            ,
	@Splice            ,
	@SubsetOf          ,
	@to                ,
	@Unbalanced        ,
	@Unless            ,
	@with              ,
	@Xither            ,
	@xor               ,
%%%%
    }, %
    morekeywords={[2] % here come the second class keywords
        @camelCase             , % not a real keyword, but used for explanations
        @CamelCase             , % not a real keyword, but used for explanations
        @UPPER\_CASE           , % not a real keyword, but used for explanations
        @Label                 ,
        @Operator              ,
        @UnaryOperator         ,
        @TypeKeyword           ,
        @NonTypeKeyword        ,
        @Identifier            ,
        @Literal               ,
        @Integer               ,
        @Punctuation           ,
        @Semicolon             ,
        @Comma                 ,
        @Colon                 ,
        @Dot                   ,
        @SomeIdentifier        ,
        @JavaType, @JavaMethodDecl,
        @Expression            ,
        @Expressions           ,
        @NoCommasExpression    ,
        @ExtendsPattern        ,
        @ImplementsPattern     ,
        @ClassPattern          ,
        @JavaMethodWhole       ,
        @JavaMethodBegin       ,
        @JavaMethodArguments,
    }, %
    alsoletter={@}, %
    literate={->}{$\rightarrow$}1 %
             {`(}{\mm{(}}1 %
             {`)}{\mm{)}}1 %
             {`()}{\mm{()}}1 %
             {`\{}{\mm{\{}}1 %
             {`\}}{\mm{\}}}1 %
             {`.}{.}1 %
             {`<}{\{}1 %
             {`>}{\}}1 %
             {`W}{\#}1 %
}

%---- Concrete Common Languages (Sorted Alphabetically --------------

\newLanguage{Ada}{ADA}
\newLanguage{Algol}{ALGOL}
\newLanguage[morekeywords={else,in}]{AWK}{AWKPROG}
\newLanguage{Bash}{BASH}
\newLanguage[directivestyle={\listingsfont\bfseries\codesize\color{olive}}]{[GNU]C++}{CEEPL}
\newLanguage[directivestyle={\listingsfont\bfseries\codesize\color{olive}}]{[GNU]C++}{CPLUSPLUS}
\newLanguage[morekeywords={select,in,from,where,var,yield},deletekeywords={base}]{[Sharp]C}{CSHARP}
\newLanguage{Cobol}{COBOL}
\newLanguage[morekeywords={yield}]{Python}{PYTHON}
\newLanguage[morekeywords={create,factory,note}]{Eiffel}{EIFFEL}
\newLanguage{php}{PEEAGEPEE}
\newLanguage{HTML}{AGETEEEMEL}
\newLanguage{GoOH}{GO}
\newLanguage[alsoletter={-}]{HTML}{HTML}
\newLanguage[morekeywords={enum,strictfp,@interface,inherited},
emph={@Override},alsoletter=@,literate={->}{$\rightarrow$}1]{Java}{JAVA}
\newLanguage{Lola}{LOLA}

\newLanguage{Macroscope}{MACROSCOPE}
\newLanguage{Oberon-2}{OBERON}
\newLanguage{Pascal}{PASCAL}
\newLanguage{Prolog}{PROLOG}
\newLanguage[morekeywords={car,cdr,caar,cddr,cadr,cdar}]{Lisp}{LISP}
\newLanguage{Fortran}{FORTRAN}
\newLanguage{Perl}{PERL}
\newLanguage{ML}{EMEL}
\newLanguage{PL/I}{PEEELONE}
\newLanguage{Haskell}{HASKELL}
\newLanguage{Occam}{OCCAM}
\newLanguage[morekeywords={<python}]{HTML}{EXEMEL}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The following macros are used for syntax highlighting.                       %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% argument #1 - the color to color the background.                             %
% argument #2 - the text to color.                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for other text                                                               %
\newcommand\q[1]{%                                                             %
  \setlength{\fboxsep}{0pt}%                                                   %
  \colorbox{LstMatchedBackR}{{#1}\strut}%                                      %
}%                                                                             %
\newcommand\qr[1]{%                                                            %
  \setlength{\fboxsep}{0pt}%                                                   %
  \colorbox{LstMatchedBackR}{{#1}\strut}%                                      %
}%                                                                             %
\newcommand\qg[1]{%                                                            %
  \setlength{\fboxsep}{0pt}%                                                   %
  \colorbox{LstMatchedBackG}{{#1}\strut}%                                      %
}%                                                                             %
\newcommand\qb[1]{%                                                            %
  \setlength{\fboxsep}{0pt}%                                                   %
  \colorbox{LstMatchedBackB}{{#1}\strut}%                                      %
}%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%http://tex.stackexchange.com/questions/100427/how-can-i-create-wrapper-macro-for-lstinline
% You may also use \lstinline for correct highligting, as in \vv, optionally add columns=fixed
% The vv macro is to be used for Lola code, excluding Python code.
\newcommand\vv[1]{\mbox{{\bf \lstinline[mathescape,extendedchars=true,style=inline,language=Lola]!#1!}\xspace}}
\newcommand\pp[1]{{\texttt{\textcolor{BlueViolet}{#1}}}}
\newcommand\lk[1]{{\texttt{\textcolor{RoyalBlue}{#1}}}}
\newcommand\bb[1]{{\texttt{\textcolor{Brown}{#1}}}}

% The vv macro is to be used for c code which is not part of a Lola code.
\newcommand\cp[1]{\mbox{{\bf \lstinline[mathescape,extendedchars=true,language={[GNU]C++},style=inline]!#1!}\xspace}}
